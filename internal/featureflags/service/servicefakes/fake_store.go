// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/georgisomnoev/feature-flag-api/internal/featureflags/model"
	"github.com/georgisomnoev/feature-flag-api/internal/featureflags/service"
	"github.com/google/uuid"
)

type FakeStore struct {
	CreateFlagStub        func(context.Context, model.FeatureFlag) error
	createFlagMutex       sync.RWMutex
	createFlagArgsForCall []struct {
		arg1 context.Context
		arg2 model.FeatureFlag
	}
	createFlagReturns struct {
		result1 error
	}
	createFlagReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteFlagStub        func(context.Context, uuid.UUID) error
	deleteFlagMutex       sync.RWMutex
	deleteFlagArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteFlagReturns struct {
		result1 error
	}
	deleteFlagReturnsOnCall map[int]struct {
		result1 error
	}
	GetFlagByIDStub        func(context.Context, uuid.UUID) (model.FeatureFlag, error)
	getFlagByIDMutex       sync.RWMutex
	getFlagByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getFlagByIDReturns struct {
		result1 model.FeatureFlag
		result2 error
	}
	getFlagByIDReturnsOnCall map[int]struct {
		result1 model.FeatureFlag
		result2 error
	}
	ListFlagsStub        func(context.Context) ([]model.FeatureFlag, error)
	listFlagsMutex       sync.RWMutex
	listFlagsArgsForCall []struct {
		arg1 context.Context
	}
	listFlagsReturns struct {
		result1 []model.FeatureFlag
		result2 error
	}
	listFlagsReturnsOnCall map[int]struct {
		result1 []model.FeatureFlag
		result2 error
	}
	UpdateFlagStub        func(context.Context, model.FeatureFlag) error
	updateFlagMutex       sync.RWMutex
	updateFlagArgsForCall []struct {
		arg1 context.Context
		arg2 model.FeatureFlag
	}
	updateFlagReturns struct {
		result1 error
	}
	updateFlagReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) CreateFlag(arg1 context.Context, arg2 model.FeatureFlag) error {
	fake.createFlagMutex.Lock()
	ret, specificReturn := fake.createFlagReturnsOnCall[len(fake.createFlagArgsForCall)]
	fake.createFlagArgsForCall = append(fake.createFlagArgsForCall, struct {
		arg1 context.Context
		arg2 model.FeatureFlag
	}{arg1, arg2})
	stub := fake.CreateFlagStub
	fakeReturns := fake.createFlagReturns
	fake.recordInvocation("CreateFlag", []interface{}{arg1, arg2})
	fake.createFlagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) CreateFlagCallCount() int {
	fake.createFlagMutex.RLock()
	defer fake.createFlagMutex.RUnlock()
	return len(fake.createFlagArgsForCall)
}

func (fake *FakeStore) CreateFlagCalls(stub func(context.Context, model.FeatureFlag) error) {
	fake.createFlagMutex.Lock()
	defer fake.createFlagMutex.Unlock()
	fake.CreateFlagStub = stub
}

func (fake *FakeStore) CreateFlagArgsForCall(i int) (context.Context, model.FeatureFlag) {
	fake.createFlagMutex.RLock()
	defer fake.createFlagMutex.RUnlock()
	argsForCall := fake.createFlagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) CreateFlagReturns(result1 error) {
	fake.createFlagMutex.Lock()
	defer fake.createFlagMutex.Unlock()
	fake.CreateFlagStub = nil
	fake.createFlagReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateFlagReturnsOnCall(i int, result1 error) {
	fake.createFlagMutex.Lock()
	defer fake.createFlagMutex.Unlock()
	fake.CreateFlagStub = nil
	if fake.createFlagReturnsOnCall == nil {
		fake.createFlagReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFlagReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteFlag(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteFlagMutex.Lock()
	ret, specificReturn := fake.deleteFlagReturnsOnCall[len(fake.deleteFlagArgsForCall)]
	fake.deleteFlagArgsForCall = append(fake.deleteFlagArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteFlagStub
	fakeReturns := fake.deleteFlagReturns
	fake.recordInvocation("DeleteFlag", []interface{}{arg1, arg2})
	fake.deleteFlagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) DeleteFlagCallCount() int {
	fake.deleteFlagMutex.RLock()
	defer fake.deleteFlagMutex.RUnlock()
	return len(fake.deleteFlagArgsForCall)
}

func (fake *FakeStore) DeleteFlagCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteFlagMutex.Lock()
	defer fake.deleteFlagMutex.Unlock()
	fake.DeleteFlagStub = stub
}

func (fake *FakeStore) DeleteFlagArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteFlagMutex.RLock()
	defer fake.deleteFlagMutex.RUnlock()
	argsForCall := fake.deleteFlagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) DeleteFlagReturns(result1 error) {
	fake.deleteFlagMutex.Lock()
	defer fake.deleteFlagMutex.Unlock()
	fake.DeleteFlagStub = nil
	fake.deleteFlagReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteFlagReturnsOnCall(i int, result1 error) {
	fake.deleteFlagMutex.Lock()
	defer fake.deleteFlagMutex.Unlock()
	fake.DeleteFlagStub = nil
	if fake.deleteFlagReturnsOnCall == nil {
		fake.deleteFlagReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFlagReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) GetFlagByID(arg1 context.Context, arg2 uuid.UUID) (model.FeatureFlag, error) {
	fake.getFlagByIDMutex.Lock()
	ret, specificReturn := fake.getFlagByIDReturnsOnCall[len(fake.getFlagByIDArgsForCall)]
	fake.getFlagByIDArgsForCall = append(fake.getFlagByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetFlagByIDStub
	fakeReturns := fake.getFlagByIDReturns
	fake.recordInvocation("GetFlagByID", []interface{}{arg1, arg2})
	fake.getFlagByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetFlagByIDCallCount() int {
	fake.getFlagByIDMutex.RLock()
	defer fake.getFlagByIDMutex.RUnlock()
	return len(fake.getFlagByIDArgsForCall)
}

func (fake *FakeStore) GetFlagByIDCalls(stub func(context.Context, uuid.UUID) (model.FeatureFlag, error)) {
	fake.getFlagByIDMutex.Lock()
	defer fake.getFlagByIDMutex.Unlock()
	fake.GetFlagByIDStub = stub
}

func (fake *FakeStore) GetFlagByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getFlagByIDMutex.RLock()
	defer fake.getFlagByIDMutex.RUnlock()
	argsForCall := fake.getFlagByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) GetFlagByIDReturns(result1 model.FeatureFlag, result2 error) {
	fake.getFlagByIDMutex.Lock()
	defer fake.getFlagByIDMutex.Unlock()
	fake.GetFlagByIDStub = nil
	fake.getFlagByIDReturns = struct {
		result1 model.FeatureFlag
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetFlagByIDReturnsOnCall(i int, result1 model.FeatureFlag, result2 error) {
	fake.getFlagByIDMutex.Lock()
	defer fake.getFlagByIDMutex.Unlock()
	fake.GetFlagByIDStub = nil
	if fake.getFlagByIDReturnsOnCall == nil {
		fake.getFlagByIDReturnsOnCall = make(map[int]struct {
			result1 model.FeatureFlag
			result2 error
		})
	}
	fake.getFlagByIDReturnsOnCall[i] = struct {
		result1 model.FeatureFlag
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) ListFlags(arg1 context.Context) ([]model.FeatureFlag, error) {
	fake.listFlagsMutex.Lock()
	ret, specificReturn := fake.listFlagsReturnsOnCall[len(fake.listFlagsArgsForCall)]
	fake.listFlagsArgsForCall = append(fake.listFlagsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListFlagsStub
	fakeReturns := fake.listFlagsReturns
	fake.recordInvocation("ListFlags", []interface{}{arg1})
	fake.listFlagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) ListFlagsCallCount() int {
	fake.listFlagsMutex.RLock()
	defer fake.listFlagsMutex.RUnlock()
	return len(fake.listFlagsArgsForCall)
}

func (fake *FakeStore) ListFlagsCalls(stub func(context.Context) ([]model.FeatureFlag, error)) {
	fake.listFlagsMutex.Lock()
	defer fake.listFlagsMutex.Unlock()
	fake.ListFlagsStub = stub
}

func (fake *FakeStore) ListFlagsArgsForCall(i int) context.Context {
	fake.listFlagsMutex.RLock()
	defer fake.listFlagsMutex.RUnlock()
	argsForCall := fake.listFlagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) ListFlagsReturns(result1 []model.FeatureFlag, result2 error) {
	fake.listFlagsMutex.Lock()
	defer fake.listFlagsMutex.Unlock()
	fake.ListFlagsStub = nil
	fake.listFlagsReturns = struct {
		result1 []model.FeatureFlag
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) ListFlagsReturnsOnCall(i int, result1 []model.FeatureFlag, result2 error) {
	fake.listFlagsMutex.Lock()
	defer fake.listFlagsMutex.Unlock()
	fake.ListFlagsStub = nil
	if fake.listFlagsReturnsOnCall == nil {
		fake.listFlagsReturnsOnCall = make(map[int]struct {
			result1 []model.FeatureFlag
			result2 error
		})
	}
	fake.listFlagsReturnsOnCall[i] = struct {
		result1 []model.FeatureFlag
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) UpdateFlag(arg1 context.Context, arg2 model.FeatureFlag) error {
	fake.updateFlagMutex.Lock()
	ret, specificReturn := fake.updateFlagReturnsOnCall[len(fake.updateFlagArgsForCall)]
	fake.updateFlagArgsForCall = append(fake.updateFlagArgsForCall, struct {
		arg1 context.Context
		arg2 model.FeatureFlag
	}{arg1, arg2})
	stub := fake.UpdateFlagStub
	fakeReturns := fake.updateFlagReturns
	fake.recordInvocation("UpdateFlag", []interface{}{arg1, arg2})
	fake.updateFlagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) UpdateFlagCallCount() int {
	fake.updateFlagMutex.RLock()
	defer fake.updateFlagMutex.RUnlock()
	return len(fake.updateFlagArgsForCall)
}

func (fake *FakeStore) UpdateFlagCalls(stub func(context.Context, model.FeatureFlag) error) {
	fake.updateFlagMutex.Lock()
	defer fake.updateFlagMutex.Unlock()
	fake.UpdateFlagStub = stub
}

func (fake *FakeStore) UpdateFlagArgsForCall(i int) (context.Context, model.FeatureFlag) {
	fake.updateFlagMutex.RLock()
	defer fake.updateFlagMutex.RUnlock()
	argsForCall := fake.updateFlagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) UpdateFlagReturns(result1 error) {
	fake.updateFlagMutex.Lock()
	defer fake.updateFlagMutex.Unlock()
	fake.UpdateFlagStub = nil
	fake.updateFlagReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) UpdateFlagReturnsOnCall(i int, result1 error) {
	fake.updateFlagMutex.Lock()
	defer fake.updateFlagMutex.Unlock()
	fake.UpdateFlagStub = nil
	if fake.updateFlagReturnsOnCall == nil {
		fake.updateFlagReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateFlagReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Store = new(FakeStore)
