// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/georgisomnoev/feature-flag-api/internal/featureflags/handler"
	"github.com/google/uuid"
)

type FakeAuthStore struct {
	UserExistsStub        func(context.Context, uuid.UUID) (bool, error)
	userExistsMutex       sync.RWMutex
	userExistsArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	userExistsReturns struct {
		result1 bool
		result2 error
	}
	userExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthStore) UserExists(arg1 context.Context, arg2 uuid.UUID) (bool, error) {
	fake.userExistsMutex.Lock()
	ret, specificReturn := fake.userExistsReturnsOnCall[len(fake.userExistsArgsForCall)]
	fake.userExistsArgsForCall = append(fake.userExistsArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.UserExistsStub
	fakeReturns := fake.userExistsReturns
	fake.recordInvocation("UserExists", []interface{}{arg1, arg2})
	fake.userExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthStore) UserExistsCallCount() int {
	fake.userExistsMutex.RLock()
	defer fake.userExistsMutex.RUnlock()
	return len(fake.userExistsArgsForCall)
}

func (fake *FakeAuthStore) UserExistsCalls(stub func(context.Context, uuid.UUID) (bool, error)) {
	fake.userExistsMutex.Lock()
	defer fake.userExistsMutex.Unlock()
	fake.UserExistsStub = stub
}

func (fake *FakeAuthStore) UserExistsArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.userExistsMutex.RLock()
	defer fake.userExistsMutex.RUnlock()
	argsForCall := fake.userExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthStore) UserExistsReturns(result1 bool, result2 error) {
	fake.userExistsMutex.Lock()
	defer fake.userExistsMutex.Unlock()
	fake.UserExistsStub = nil
	fake.userExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthStore) UserExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.userExistsMutex.Lock()
	defer fake.userExistsMutex.Unlock()
	fake.UserExistsStub = nil
	if fake.userExistsReturnsOnCall == nil {
		fake.userExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.userExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.AuthStore = new(FakeAuthStore)
