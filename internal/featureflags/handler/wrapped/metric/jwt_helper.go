// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../observability/templates/otel_metric.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package metric

import (
	"context"
	"time"

	_sourceHandler "github.com/georgisomnoev/feature-flag-api/internal/featureflags/handler"
	"github.com/golang-jwt/jwt/v5"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
)

type JWTHelperMetrics struct {
	RequestCounter  metric.Int64Counter
	RequestDuration metric.Float64Histogram
}

type JWTHelperWithMetrics struct {
	base    _sourceHandler.JWTHelper
	metrics *JWTHelperMetrics
}

func NewJWTHelperWithMetrics(base _sourceHandler.JWTHelper) *JWTHelperWithMetrics {
	meter := otel.GetMeterProvider().Meter("")

	requestCounter, _ := meter.Int64Counter("JWTHelper_requests_total", metric.WithDescription("Total number of JWTHelper method calls"))
	durationHistogram, _ := meter.Float64Histogram("JWTHelper_request_duration_ms", metric.WithDescription("Duration of JWTHelper method calls in milliseconds"))

	return &JWTHelperWithMetrics{
		base: base,
		metrics: &JWTHelperMetrics{
			RequestCounter:  requestCounter,
			RequestDuration: durationHistogram,
		},
	}
}

func (_d *JWTHelperWithMetrics) ValidateToken(token string) (m1 jwt.MapClaims, err error) {
	startTime := time.Now()

	var metricCtx context.Context

	if metricCtx == nil {
		metricCtx = context.Background()
	}

	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		_d.metrics.RequestCounter.Add(metricCtx, 1,
			metric.WithAttributes(
				attribute.String("method", "ValidateToken"),
				attribute.String("status", result),
			),
		)
		duration := float64(time.Since(startTime).Milliseconds())
		_d.metrics.RequestDuration.Record(metricCtx, duration, metric.WithAttributes(attribute.String("method", "ValidateToken")))
	}()
	return _d.base.ValidateToken(token)
}
