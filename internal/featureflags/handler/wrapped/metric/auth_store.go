// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../observability/templates/otel_metric.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package metric

import (
	"context"
	"time"

	_sourceHandler "github.com/georgisomnoev/feature-flag-api/internal/featureflags/handler"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
)

type AuthStoreMetrics struct {
	RequestCounter  metric.Int64Counter
	RequestDuration metric.Float64Histogram
}

type AuthStoreWithMetrics struct {
	base    _sourceHandler.AuthStore
	metrics *AuthStoreMetrics
}

func NewAuthStoreWithMetrics(base _sourceHandler.AuthStore) *AuthStoreWithMetrics {
	meter := otel.GetMeterProvider().Meter("")

	requestCounter, _ := meter.Int64Counter("AuthStore_requests_total", metric.WithDescription("Total number of AuthStore method calls"))
	durationHistogram, _ := meter.Float64Histogram("AuthStore_request_duration_ms", metric.WithDescription("Duration of AuthStore method calls in milliseconds"))

	return &AuthStoreWithMetrics{
		base: base,
		metrics: &AuthStoreMetrics{
			RequestCounter:  requestCounter,
			RequestDuration: durationHistogram,
		},
	}
}

func (_d *AuthStoreWithMetrics) UserExists(ctx context.Context, id uuid.UUID) (b1 bool, err error) {
	startTime := time.Now()

	var metricCtx context.Context

	metricCtx = ctx

	if metricCtx == nil {
		metricCtx = context.Background()
	}

	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		_d.metrics.RequestCounter.Add(metricCtx, 1,
			metric.WithAttributes(
				attribute.String("method", "UserExists"),
				attribute.String("status", result),
			),
		)
		duration := float64(time.Since(startTime).Milliseconds())
		_d.metrics.RequestDuration.Record(metricCtx, duration, metric.WithAttributes(attribute.String("method", "UserExists")))
	}()
	return _d.base.UserExists(ctx, id)
}
