// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../observability/templates/otel_trace.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package trace

import (
	"context"

	_sourceHandler "github.com/georgisomnoev/feature-flag-api/internal/featureflags/handler"
	"github.com/georgisomnoev/feature-flag-api/internal/featureflags/model"
	"github.com/google/uuid"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	_codes "go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// ServiceWithTracing implements Service interface instrumented with open telemetry spans
type ServiceWithTracing struct {
	_sourceHandler.Service
	tracer trace.Tracer
}

// NewServiceWithTracing returns ServiceWithTracing
func NewServiceWithTracing(base _sourceHandler.Service) ServiceWithTracing {
	d := ServiceWithTracing{
		Service: base,
		tracer:  otel.GetTracerProvider().Tracer(""),
	}

	return d
}

// CreateFlag implements Service
func (_d ServiceWithTracing) CreateFlag(ctx context.Context, f1 model.FeatureFlag) (err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.CreateFlag")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.CreateFlag(ctx, f1)
}

// DeleteFlag implements Service
func (_d ServiceWithTracing) DeleteFlag(ctx context.Context, u1 uuid.UUID) (err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.DeleteFlag")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.DeleteFlag(ctx, u1)
}

// GetFlagByID implements Service
func (_d ServiceWithTracing) GetFlagByID(ctx context.Context, u1 uuid.UUID) (f1 model.FeatureFlag, err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.GetFlagByID")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.GetFlagByID(ctx, u1)
}

// ListFlags implements Service
func (_d ServiceWithTracing) ListFlags(ctx context.Context) (fa1 []model.FeatureFlag, err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.ListFlags")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.ListFlags(ctx)
}

// UpdateFlag implements Service
func (_d ServiceWithTracing) UpdateFlag(ctx context.Context, f1 model.FeatureFlag) (err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.UpdateFlag")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.UpdateFlag(ctx, f1)
}
