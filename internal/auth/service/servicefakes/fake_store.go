// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/georgisomnoev/feature-flag-api/internal/auth/model"
	"github.com/georgisomnoev/feature-flag-api/internal/auth/service"
)

type FakeStore struct {
	GetByUsernameStub        func(context.Context, string) (*model.User, error)
	getByUsernameMutex       sync.RWMutex
	getByUsernameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getByUsernameReturns struct {
		result1 *model.User
		result2 error
	}
	getByUsernameReturnsOnCall map[int]struct {
		result1 *model.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) GetByUsername(arg1 context.Context, arg2 string) (*model.User, error) {
	fake.getByUsernameMutex.Lock()
	ret, specificReturn := fake.getByUsernameReturnsOnCall[len(fake.getByUsernameArgsForCall)]
	fake.getByUsernameArgsForCall = append(fake.getByUsernameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetByUsernameStub
	fakeReturns := fake.getByUsernameReturns
	fake.recordInvocation("GetByUsername", []interface{}{arg1, arg2})
	fake.getByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetByUsernameCallCount() int {
	fake.getByUsernameMutex.RLock()
	defer fake.getByUsernameMutex.RUnlock()
	return len(fake.getByUsernameArgsForCall)
}

func (fake *FakeStore) GetByUsernameCalls(stub func(context.Context, string) (*model.User, error)) {
	fake.getByUsernameMutex.Lock()
	defer fake.getByUsernameMutex.Unlock()
	fake.GetByUsernameStub = stub
}

func (fake *FakeStore) GetByUsernameArgsForCall(i int) (context.Context, string) {
	fake.getByUsernameMutex.RLock()
	defer fake.getByUsernameMutex.RUnlock()
	argsForCall := fake.getByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) GetByUsernameReturns(result1 *model.User, result2 error) {
	fake.getByUsernameMutex.Lock()
	defer fake.getByUsernameMutex.Unlock()
	fake.GetByUsernameStub = nil
	fake.getByUsernameReturns = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetByUsernameReturnsOnCall(i int, result1 *model.User, result2 error) {
	fake.getByUsernameMutex.Lock()
	defer fake.getByUsernameMutex.Unlock()
	fake.GetByUsernameStub = nil
	if fake.getByUsernameReturnsOnCall == nil {
		fake.getByUsernameReturnsOnCall = make(map[int]struct {
			result1 *model.User
			result2 error
		})
	}
	fake.getByUsernameReturnsOnCall[i] = struct {
		result1 *model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Store = new(FakeStore)
