// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../observability/templates/otel_trace.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package trace

import (
	"context"

	"github.com/georgisomnoev/feature-flag-api/internal/auth/model"
	_sourceService "github.com/georgisomnoev/feature-flag-api/internal/auth/service"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	_codes "go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// StoreWithTracing implements Store interface instrumented with open telemetry spans
type StoreWithTracing struct {
	_sourceService.Store
	tracer trace.Tracer
}

// NewStoreWithTracing returns StoreWithTracing
func NewStoreWithTracing(base _sourceService.Store) StoreWithTracing {
	d := StoreWithTracing{
		Store:  base,
		tracer: otel.GetTracerProvider().Tracer(""),
	}

	return d
}

// GetByUsername implements Store
func (_d StoreWithTracing) GetByUsername(ctx context.Context, s1 string) (up1 *model.User, err error) {
	ctx, _span := _d.tracer.Start(ctx, "Store.GetByUsername")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Store.GetByUsername(ctx, s1)
}
