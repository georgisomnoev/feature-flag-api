// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../observability/templates/otel_trace.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package trace

import (
	"context"

	_sourceHandler "github.com/georgisomnoev/feature-flag-api/internal/auth/handler"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	_codes "go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// ServiceWithTracing implements Service interface instrumented with open telemetry spans
type ServiceWithTracing struct {
	_sourceHandler.Service
	tracer trace.Tracer
}

// NewServiceWithTracing returns ServiceWithTracing
func NewServiceWithTracing(base _sourceHandler.Service) ServiceWithTracing {
	d := ServiceWithTracing{
		Service: base,
		tracer:  otel.GetTracerProvider().Tracer(""),
	}

	return d
}

// Authenticate implements Service
func (_d ServiceWithTracing) Authenticate(ctx context.Context, s1 string, s2 string) (s3 string, err error) {
	ctx, _span := _d.tracer.Start(ctx, "Service.Authenticate")
	defer func() {
		if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}
		_span.End()
	}()
	return _d.Service.Authenticate(ctx, s1, s2)
}
